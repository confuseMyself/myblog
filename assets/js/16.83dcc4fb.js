(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{289:function(t,e,r){"use strict";r.r(e);var s=r(3),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"react-16-x-新的生命周期的理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-16-x-新的生命周期的理解"}},[t._v("#")]),t._v(" react 16.x 新的生命周期的理解")]),t._v(" "),r("h2",{attrs:{id:"react-组件的生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-组件的生命周期"}},[t._v("#")]),t._v(" react 组件的生命周期")]),t._v(" "),r("ul",[r("li",[t._v("构建期：constructor->getDerivedStateFromProps->render->react更新dom和refs->componentDidMount")]),t._v(" "),r("li",[t._v("更新期：在new props 、setState()、forceUpdate()时react处于更新期：getDerivedStateFromProps=>shouldComponentUpdate=>render=>getSnapshotBeforeUpdate=>\nreact更新dom和refs=>componentDidUpdate")]),t._v(" "),r("li",[t._v("卸载期：componentWillUnmount")])]),t._v(" "),r("h4",{attrs:{id:"constructor-props"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#constructor-props"}},[t._v("#")]),t._v(" constructor(props)")]),t._v(" "),r("ul",[r("li",[t._v("es6 class类的构造函数，在类构建示例时执行，参数为props，即父组件传给子组件的信息；")]),t._v(" "),r("li",[t._v("super(props)，调用基类的构造函数，也将父组件的props注入给子组件，react是单向数据流，因此props只能读，不能改变")]),t._v(" "),r("li",[t._v("该生命周期用来做一些组件的初始化工作，如定义this.state的初始内容；")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("constructor(props) {\n        super(props); // super 作用：在constructor中能使用this\n        this.state = {\n        }\n    }\n")])])]),r("h4",{attrs:{id:"static-getderivedstatefromprops-nextprops-currentstate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#static-getderivedstatefromprops-nextprops-currentstate"}},[t._v("#")]),t._v(" static getDerivedStateFromProps(nextProps,currentState)")]),t._v(" "),r("ul",[r("li",[t._v("react 16 新增的生命周期,是个静态函数，且是无副作用的纯函数，返回一个对象来更改state（返回null表示不更新state）；")]),t._v(" "),r("li",[t._v("在构建组件和组件每次更新时都会调用；")])]),t._v(" "),r("p",[t._v("  getDerivedStateFromProps翻译成中文是：从props获取的派生的state，该钩子函数主要是用于props发生变化时，是否要更改state，如果要对比前后props变化来做出一些判断，请移步到shouldComponentUpdate钩子函数里来操作，或者在constructor通过props来初始化state，然后通过nextProps和currentState（此时的currentState == 之前的props）来做出判断，但是如果组件通过setState来更新了组件的状态，那么通过这种方法判断不了props前后的变化，所以 "),r("em",[r("strong",[t._v("该钩子函数更好的用法是基于对nextProps和currentState的对比来更改state")])]),t._v("。")]),t._v(" "),r("p",[t._v("  该钩子函数有两个参数：nextProps，currentState。nextProps下次获取到的props，currentState表示当前state，当组件通过setState改变状态时，调用getDerivedStateFromProps，此时currentState为setState之后的值,但是此时this.state没有改变，在此钩子函数里访问this.state(可以通过把this挂载到一个变量上，然后在此钩子函数里通过访问这个变量来间接访问this)，state也为setState之后的值，记住，"),r("em",[r("strong",[t._v("currentState为setState之后的值，但是此时的state未改变，而shouldComponentUpdate的第二个参数nextState为setState之后的值，在shouldComponentUpdate访问this.state为setState之前的值")])]),t._v("。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('import React from \'react\';\nlet app = null;\nclass User extends React.Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tname:"",\n\t\t\tage:"",\n\t\t\tlesson:""\n\t\t}\n\t}\n\tstatic getDerivedStateFromProps(nextProps, currentState) {\n\t\t// console.log("user, getDerivedStateFromProps",nextProps,currentState)\n\t\treturn null\n\t}\n\trender() {\n\t\tconst {\n\t\t\tname,\n\t\t\tage,\n\t\t\tlesson,\n\t\t\t...rest\n\t\t} = this.props\n\t\treturn (\n\t\t\t<div {...rest}>\n\t\t\t\t{name} - {age} - {lesson}\n\t\t\t</div>\n\t\t);\n\t}\n}\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tname: \'ryan\',\n\t\t\tage: 30,\n\t\t\tlesson: \'react\'\n\t\t}\n\t}\n\tstatic getDerivedStateFromProps(nextProps, currentState ) {\n\t\tconsole.log("getDerivedStateFromProps",currentState )\n\t\tconsole.log("getDerivedStateFromProps",app)\n\t\treturn null\n\t}\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\tconsole.log("shouldComponentUpdate",nextState,this.state);\n\t\tconsole.log("shouldComponentUpdate app",app.state)\n\t\treturn true\n\t}\n\tgetSnapshotBeforeUpdate(prevProps, prevState) {\n\t\tconsole.log("getSnapshotBeforeUpdate",prevProps, prevState)\n\t\treturn null\n\t}\n\tcomponentDidUpdate(){\n\n\t}\n\tcomponentDidMount(){\n\t\tapp = this;\n\t}\n\trender() {\n\t\tlet {\n\t\t\tname,\n\t\t\tage,\n\t\t\tlesson\n\t\t} = this.state\n\t\tconsole.log("render",this.state)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<User\n\t\t\t\t\tname={name}\n\t\t\t\t\tage={age}\n\t\t\t\t\tlesson={lesson}\n\t\t\t\t\tstyle={{ color: \'red\' }}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tname: "讲为甚"\n\t\t\t\t\t\t},()=>{\n\t\t\t\t\t\t\tconsole.log("setState",this.state)\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseOver={() => {\n\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\nexport default App;\n\n')])])]),r("p",[t._v("点击之后，控制台打印")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('getDerivedStateFromProps: {name: "讲为甚", age: 30, lesson: "react"}\ngetDerivedStateFromProps this.state === currentState: false\ngetDerivedStateFromProps this.state: {name: "ryan", age: 30, lesson: "react"}\nshouldComponentUpdate: {name: "讲为甚", age: 30, lesson: "react"}\nshouldComponentUpdate this.state: true\nshouldComponentUpdate this.state: {name: "ryan", age: 30, lesson: "react"}\n')])])]),r("h4",{attrs:{id:"componentdidmount"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentdidmount"}},[t._v("#")]),t._v(" componentDidMount")]),t._v(" "),r("ul",[r("li",[t._v("该钩子函数用于组件挂载完成时调用，在组件的整个生命周期，只执行一次。")]),t._v(" "),r("li",[t._v("该钩子函数一般用于ajax请求的初始化赋值state")])]),t._v(" "),r("h4",{attrs:{id:"shouldcomponentupdate-nextprops-nextstate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#shouldcomponentupdate-nextprops-nextstate"}},[t._v("#")]),t._v(" shouldComponentUpdate(nextProps,nextState)")]),t._v(" "),r("ul",[r("li",[t._v("该钩子函数主要用于减少组件的重复的渲染次数")])]),t._v(" "),r("p",[t._v("react 当父组件更新时，不管自组件的props是否又变换，子组件都会重新渲染，所以，该钩子函数主要用于对比前后props的变化，前后state的变化来阻止组件的重复渲染")]),t._v(" "),r("ul",[r("li",[t._v("react 新的构建组件的类，pureCompenent 可以自动对比浅层的props的变化来是否更新组件，对于对象深层次嵌套是不能对比的，且在该类中使用了shouldComponentUpdate之后，就不会起作用了。")]),t._v(" "),r("li",[t._v("通过setState改变的state，在此钩子函数中，还没改变，访问this.state 将获取到setState 之前的值，此钩子函数的第二个参数nextState为setState之后的值。")])]),t._v(" "),r("h4",{attrs:{id:"render"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#render"}},[t._v("#")]),t._v(" render")]),t._v(" "),r("p",[t._v("通过diff算法，调用react.createElement()方法，生成新的虚拟dom，此时的state已经改变，state为setState之后的值")]),t._v(" "),r("h4",{attrs:{id:"getsnapshotbeforeupdate-prevprops-prevstate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#getsnapshotbeforeupdate-prevprops-prevstate"}},[t._v("#")]),t._v(" getSnapshotBeforeUpdate(prevProps, prevState)")]),t._v(" "),r("p",[t._v("在render 函数之后调用，在更新dom及ref之前调用，return 之后的数据将作为第三个参数传递给被componentDidUpdate接收到，此时的state已经改变，是setState之后的值。")]),t._v(" "),r("h4",{attrs:{id:"componentdidupdate-prevprops-prevstate-data"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#componentdidupdate-prevprops-prevstate-data"}},[t._v("#")]),t._v(" componentDidUpdate(prevProps, prevState, data)")]),t._v(" "),r("p",[t._v("第三个参数为getSnapshotBeforeUpdate return 之后的数据。主要用于dom更新完成之后的一些操作。")]),t._v(" "),r("h2",{attrs:{id:"父子组件生命周期的先后顺序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#父子组件生命周期的先后顺序"}},[t._v("#")]),t._v(" 父子组件生命周期的先后顺序")]),t._v(" "),r("h3",{attrs:{id:"构建期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构建期"}},[t._v("#")]),t._v(" 构建期")]),t._v(" "),r("p",[t._v("父constructor->父static getDerivedStateFromProps->父 render-> 子constructor->子static getDerivedStateFromProps->子 render->子componentDidMount->父componentDidMount")]),t._v(" "),r("p",[r("em",[r("strong",[t._v("总结：父组件先render，子组件先挂载")])])]),t._v(" "),r("h3",{attrs:{id:"父组件更新时"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#父组件更新时"}},[t._v("#")]),t._v(" 父组件更新时")]),t._v(" "),r("p",[t._v("父static getDerivedStateFromProps->父 render->子static getDerivedStateFromProps->子 render->子componentDidUpdate->父componentDidUpdate")]),t._v(" "),r("p",[r("em",[r("strong",[t._v("总结：父组件先render，子组件先完成更新")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);